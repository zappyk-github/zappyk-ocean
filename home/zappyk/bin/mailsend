#!/usr/bin/perl -W
$|=1;

use strict;
use Mail::Sender;
use File::Basename;

#CZ#use IO::Socket::SSL qw(debug3);
#CZ#use Net::SSLeay;

my $THIS          = basename( $0 );

my $iEXIT_CODE    = 0;

my $iMAIL_SMTP    = 'smtp.gmail.com'         ; $iMAIL_SMTP = 'smtp.ngi.it';
my $iMAIL_FROM    = 'zappyk.notice@gmail.com'; $iMAIL_FROM = 'zappyk@ngi.it';
my $iMAIL_SUBJECT = '';
my @vMAIL_HEADERS = ("X-ZappykNotice: $iMAIL_SMTP");
my @vMAIL_TO      = ();
my @vMAIL_CC      = ();
my @vMAIL_BCC     = ();
my @vMAIL_MSG     = ();
my @vMAIL_FILES   = ();
my $iMAIL_STDIN   = '-';
my %iMAIL_COMMONS;
my $iMAIL_SEND;

my $iMAIL_HTML           = 0;
my $iMAIL_HTML_FONT_FACE = 'arial,helvetica,sans-serif';
my $iMAIL_HTML_FONT_STYL = 'font-family: courier new,monospace;';
my $iMAIL_HTML_FONT_SIZE = 1;

my $help = 0; $help = 1 if (scalar(@ARGV) == 0);
for ( my $i=0; $i<scalar(@ARGV); $i++ ) {
    SWITCH: for( $ARGV[$i] ) {
        ( /^(-)?-(p|smtp)$/             ) && do{ $iMAIL_SMTP           = $ARGV[++$i]                          ; last SWITCH; };
        ( /^(-)?-(f|from)$/             ) && do{ $iMAIL_FROM           = $ARGV[++$i]                          ; last SWITCH; };
        ( /^(-)?-(s|subject)$/          ) && do{ $iMAIL_SUBJECT        = $ARGV[++$i]                          ; last SWITCH; };

        ( /^(-)?-(l|html)$/             ) && do{ $iMAIL_HTML           = 1                                    ; last SWITCH; };
        ( /^(-)?-(lfs|html-font-size)$/ ) && do{ $iMAIL_HTML_FONT_SIZE = $ARGV[++$i]                          ; last SWITCH; };

        ( /^(-)?-(e|headers)$/          ) && do{ @vMAIL_HEADERS        = (); push(@vMAIL_HEADERS, $ARGV[++$i]); last SWITCH; };
        ( /^(-)?-(t|to)$/               ) && do{ @vMAIL_TO             = (); push(@vMAIL_TO     , $ARGV[++$i]); last SWITCH; };
        ( /^(-)?-(c|cc)$/               ) && do{ @vMAIL_CC             = (); push(@vMAIL_CC     , $ARGV[++$i]); last SWITCH; };
        ( /^(-)?-(b|bcc)$/              ) && do{ @vMAIL_BCC            = (); push(@vMAIL_BCC    , $ARGV[++$i]); last SWITCH; };
        ( /^(-)?-(m|msg)$/              ) && do{ @vMAIL_MSG            = (); push(@vMAIL_MSG    , $ARGV[++$i]); last SWITCH; };
        ( /^(-)?-(a|file)$/             ) && do{ @vMAIL_FILES          = (); push(@vMAIL_FILES  , $ARGV[++$i]); last SWITCH; };

        ( /^(\+)?\+(e|headers)$/        ) && do{                             push(@vMAIL_HEADERS, $ARGV[++$i]); last SWITCH; };
        ( /^(\+)?\+(t|to)$/             ) && do{                             push(@vMAIL_TO     , $ARGV[++$i]); last SWITCH; };
        ( /^(\+)?\+(c|cc)$/             ) && do{                             push(@vMAIL_CC     , $ARGV[++$i]); last SWITCH; };
        ( /^(\+)?\+(b|bcc)$/            ) && do{                             push(@vMAIL_BCC    , $ARGV[++$i]); last SWITCH; };
        ( /^(\+)?\+(m|msg)$/            ) && do{                             push(@vMAIL_MSG    , $ARGV[++$i]); last SWITCH; };
        ( /^(\+)?\+(a|file)$/           ) && do{                             push(@vMAIL_FILES  , $ARGV[++$i]); last SWITCH; };

        ( /^(-h|--help)$/i ) && do{ $help = 1; last SWITCH; };
    }
}
for (my $i=0; $i<scalar(@vMAIL_MSG); $i++) { $vMAIL_MSG[$i] = readSTDIN() if ( $vMAIL_MSG[$i] eq $iMAIL_STDIN ) }
my %hMAIL_HEADERS = map( +( $_, 1 ), @vMAIL_HEADERS ); @vMAIL_HEADERS = keys( %hMAIL_HEADERS );
my %hMAIL_TO      = map( +( $_, 1 ), @vMAIL_TO      ); @vMAIL_TO      = keys( %hMAIL_TO      );
my %hMAIL_CC      = map( +( $_, 1 ), @vMAIL_CC      ); @vMAIL_CC      = keys( %hMAIL_CC      );
my %hMAIL_BCC     = map( +( $_, 1 ), @vMAIL_BCC     ); @vMAIL_BCC     = keys( %hMAIL_BCC     );
my $iMAIL_HEADERS = join( '\n', @vMAIL_HEADERS );
my $iMAIL_TO      = join( ', ', @vMAIL_TO      );
my $iMAIL_CC      = join( ', ', @vMAIL_CC      );
my $iMAIL_BCC     = join( ', ', @vMAIL_BCC     );
my $iMAIL_MSG     = join( '\n', @vMAIL_MSG     );
my $iMAIL_FILES   = join( ', ', @vMAIL_FILES   );
help() if ( $help );

$iMAIL_MSG     = readSTDIN() if ( $iMAIL_MSG eq '' );
$iMAIL_MSG     = join( "\n", split( /\\n/, $iMAIL_MSG     ) );
$iMAIL_HEADERS = join( "\n", split( /\\n/, $iMAIL_HEADERS ) );
%iMAIL_COMMONS =
(
#_______________________________________________________________________________
#
'smtp.gmail.com' => { 
#_______________________________________________________________________________
#CZ#debug           => '/dev/stderr',
#CZ#debug_level     => 4,
####=================
#CZ#SSL_ca_file     => '/etc/ssl/certs/smtp.gmail.com.crt.pem',
#CZ#SSL_version     => 'TLSv1',
    SSL_version     => 'SSLv23:!SSLv2',
    SSL_verify_mode => 0,
#CZ#TLS_allowed     => 1,
    TLS_required    => 1,
#CZ#auth            => 'PLAIN',
    auth            => 'LOGIN',
    authid          => $iMAIL_FROM,
#CZ#authpwd         => 'z4pp1k@n0t1c3',
    authpwd         => 'z4pp1k@n0t1c3s',
    authdomain      => 'gmail.com',
#CZ#port            => 587,
####=================
    smtp            => $iMAIL_SMTP,
    from            => $iMAIL_FROM,
    subject         => $iMAIL_SUBJECT,
    headers         => $iMAIL_HEADERS,
    to              => $iMAIL_TO,
    cc              => $iMAIL_CC,
    bcc             => $iMAIL_BCC,
},
#_______________________________________________________________________________
#
'smtp.ngi.it' => {
#_______________________________________________________________________________
    esmtp           => { 'NOTIFY' => ''
                       , 'RET'    => ''
                       , 'ORCPT'  => ''
                       , 'ENVID'  => '' },
####=================
    auth            => 'LOGIN',
    authid          => $iMAIL_FROM,
    authpwd         => 'Z4pp1kW3bm',
    authdomain      => 'ngi.it',
####=================
    smtp            => $iMAIL_SMTP,
    from            => $iMAIL_FROM,
    subject         => $iMAIL_SUBJECT,
    headers         => $iMAIL_HEADERS,
    to              => $iMAIL_TO,
    cc              => $iMAIL_CC,
    bcc             => $iMAIL_BCC,
});

$iMAIL_SEND = new Mail::Sender() || die( "$THIS: non posso creare l'oggetto Mail::Sender ($Mail::Sender::Error)\n" );

if ( $iMAIL_HTML ) {

my $iMAIL_MSG_BODY = $iMAIL_MSG;
my $iMAIL_MSG_HTML = "<html><body><font face=\"$iMAIL_HTML_FONT_FACE\" style=\"$iMAIL_HTML_FONT_STYL\" size=\"$iMAIL_HTML_FONT_SIZE\"><pre>$iMAIL_MSG_BODY</pre></font></body></html>";

if ( scalar(@vMAIL_FILES) > 0 ) {

    $iEXIT_CODE = 1 if ( $iMAIL_SEND->OpenMultipart
                            ({
                                   #smtp      => $iMAIL_SMTP,
                                   #from      => $iMAIL_FROM,
                                   #subject   => $iMAIL_SUBJECT,
                                   #headers   => $iMAIL_HEADERS,
                                   #to        => $iMAIL_TO,
                                   #cc        => $iMAIL_CC,
                                   #bcc       => $iMAIL_BCC,
                                    %{$iMAIL_COMMONS{$iMAIL_SMTP}},
                                    multipart => 'mixed',
                            })->Part({ ctype => 'multipart/alternative' })
                              ->Part({ ctype => 'text/plain', disposition => 'NONE', msg => $iMAIL_MSG_BODY })
                              ->Part({ ctype => 'text/html' , disposition => 'NONE', msg => $iMAIL_MSG_HTML })
                              ->EndPart("multipart/alternative")
                              ->Attach({ file => \@vMAIL_FILES })
                              ->Close() >= 0 );

} else {

    $iEXIT_CODE = 1 if ( $iMAIL_SEND->OpenMultipart
                            ({
                                   #smtp      => $iMAIL_SMTP,
                                   #from      => $iMAIL_FROM,
                                   #subject   => $iMAIL_SUBJECT,
                                   #headers   => $iMAIL_HEADERS,
                                   #to        => $iMAIL_TO,
                                   #cc        => $iMAIL_CC,
                                   #bcc       => $iMAIL_BCC,
                                    %{$iMAIL_COMMONS{$iMAIL_SMTP}},
                                    multipart => 'mixed',
                            })->Part({ ctype => 'multipart/alternative' })
                              ->Part({ ctype => 'text/plain', disposition => 'NONE', msg => $iMAIL_MSG_BODY })
                              ->Part({ ctype => 'text/html' , disposition => 'NONE', msg => $iMAIL_MSG_HTML })
                              ->EndPart("multipart/alternative")
                              ->Close() >= 0 );

}

} else {

if ( scalar(@vMAIL_FILES) > 0 ) {

    $iEXIT_CODE = 1 if ( $iMAIL_SEND->MailFile
                            ({
                                   #smtp    => $iMAIL_SMTP,
                                   #from    => $iMAIL_FROM,
                                   #subject => $iMAIL_SUBJECT,
                                   #headers => $iMAIL_HEADERS,
                                   #to      => $iMAIL_TO,
                                   #cc      => $iMAIL_CC,
                                   #bcc     => $iMAIL_BCC,
                                    %{$iMAIL_COMMONS{$iMAIL_SMTP}},
                                    msg     => $iMAIL_MSG,
                                    file    => \@vMAIL_FILES
                            }) >= 0 );

} else {

    $iEXIT_CODE = 1 if ( $iMAIL_SEND->MailMsg
                            ({
                                   #smtp    => $iMAIL_SMTP,
                                   #from    => $iMAIL_FROM,
                                   #subject => $iMAIL_SUBJECT,
                                   #headers => $iMAIL_HEADERS,
                                   #to      => $iMAIL_TO,
                                   #cc      => $iMAIL_CC,
                                   #bcc     => $iMAIL_BCC,
                                    %{$iMAIL_COMMONS{$iMAIL_SMTP}},
                                    msg     => $iMAIL_MSG
                            }) >= 0 );

}

}

warn( "$THIS: errore: $Mail::Sender::Error", "\n" ) if ( defined($Mail::Sender::Error) );

die( "$THIS: messaggio non inviato!\n" ) if ( ! $iEXIT_CODE );

sub help
{
    my $iMAIL_HTML_DEFAULT = ($iMAIL_HTML)?'is default':'is not default';
    print( << "_EOD_" );
Uso:
    $THIS
        -p   |  --smtp    <server>                  (= '$iMAIL_SMTP')
        -f   |  --from    <address>                 (= '$iMAIL_FROM')
        -s   |  --subject <text>                    (= '$iMAIL_SUBJECT')

        -l   |  --html                              ($iMAIL_HTML_DEFAULT)
        -lfs |  --html-font-size <number>           (= '$iMAIL_HTML_FONT_SIZE')

        -e   |  --headers <header>\\n...\\n<header>   (= '$iMAIL_HEADERS')
        +e   |  ++headers <header>\\n...\\n<header>

        -t   |  --to      <address,...,address>     (= '$iMAIL_TO')
        +t   |  ++to      <address,...,address>

        -c   |  --cc      <address,...,address>     (= '$iMAIL_CC')
        +c   |  ++cc      <address,...,address>

        -b   |  --bcc     <address,...,address>     (= '$iMAIL_BCC')
        +b   |  ++bcc     <address,...,address>

        -m   |  --msg     <text>\\n...\\n<text>       (= '$iMAIL_MSG')
        +m   |  ++msg     <text>\\n...\\n<text>

        -a   |  --file    <file-name>               (= '$iMAIL_FILES')
        +a   |  ++file    <file-name>

        -h   |  --help

Nota:
 *  Il '--' di una opzione azzera l'opzione stessa.

 *  Il '++' di una opzione va in aggiunta a quelle gia' specificate.

 *  Se l'opzione --msg (-m) non e' settata, oppure e' settata con la
    variabile '$iMAIL_STDIN', il programma leggera' dallo STDIN.
_EOD_

    exit( 1 );
}

sub readSTDIN
{
    my @text = ();

    while (my $line = <STDIN>) { push(@text, $line) }

    return( join('', @text) );
}
