#!/bin/env bash

THIS=$0
NAME=$(basename "$0")

EXEC=$1 ; shift
FILE=$1 ; shift
FINE=$* ; shift

CMD_ENCFS=$(which encfs)
CMD_UMOUNT=$(which umount)
CMD_FIND=$(which find)
CMD_ZIP=$(which 7z  2>/dev/null)
CMD_ZIP=$(which 7za 2>/dev/null)
OPT_RAR='a -hp -r'
OPT_ZIP='a -p -r'

EC_nBLACK_='\033[0;30m' ; EC_dGREY__='\033[0;30m'
EC_nRED___='\033[0;31m' ; EC_lRED___='\033[0;31m'
EC_nGREEN_='\033[0;32m' ; EC_lGREEN_='\033[0;32m'
EC_nBROWN_='\033[0;33m' ; EC_YELLOW_='\033[0;33m'
EC_nBLUE__='\033[0;34m' ; EC_lBLUE__='\033[0;34m'
EC_nPURPLE='\033[0;35m' ; EC_lPURPLE='\033[0;35m'
EC_nCYAN__='\033[0;36m' ; EC_lCYAN__='\033[0;36m'
EC_lGREY__='\033[0;37m' ; EC_WHITE__='\033[0;37m'
EC_n_xxx_1='\033[0;38m' ; EC_l_xxx_1='\033[0;38m'
EC_n_xxx_2='\033[0;39m' ; EC_l_xxx_2='\033[0;39m'
EC_n_xxx_3='\033[0;40m' ; EC_l_xxx_3='\033[0;40m'
EC_NoC____='\033[0m'

_error() { echo "${1//?/_}" ; echo "$1"; }
_print() { echo "$NAME: execute $1"; }
_write() {
    local file=$1 ; shift
    local grep=$*
    printf "$EC_nBROWN_"
    printf "      _%s_ \n" "${file//?/_}"
    printf "FILE=| %s |\n" "${file}"
    printf "_____|_%s_|\n" "${file//?/_}"
    printf "$EC_NoC____"
    if [ -z "$grep" ]; then
        cat "$file"                         ; local rc=$?
    else
        cat "$file" | grep --color -i $grep ; local rc=$?
    fi
    printf "$EC_nBROWN_"
    printf "_______%s__\n" "${file//?/_}"
    printf "$EC_NoC____"
    return $rc
}

PATH_COMMON="$HOME"
PATH_SOURCE="$PATH_COMMON/Dropbox/Private"
DIR_OFMOUNT="$PATH_COMMON/Dropbox-Private"
DIR_BACKUP_="$DIR_OFMOUNT/backup/"
TAG_BACKUP_="$DIR_OFMOUNT.backup_$(date +'%Y%m%d').rar"
TAG_BACKUP_="$DIR_OFMOUNT.backup_$(date +'%Y%m%d').7z"

[ ! -n "$CMD_ENCFS"  ] && echo "$NAME: Installa il pacchetto encfs!"  && exit 1
[ ! -n "$CMD_UMOUNT" ] && echo "$NAME: Installa il pacchetto umount!" && exit 1
[ ! -n "$CMD_FIND"   ] && echo "$NAME: Installa il pacchetto find!"   && exit 1
[ ! -n "$CMD_ZIP"    ] && echo "$NAME: Installa il pacchetto p7zip!"  && exit 1

[ ! -d "$PATH_SOURCE" ] && echo "$NAME: Path di Partenza '$PATH_SOURCE' inesistente..." && exit 1
[ ! -d "$DIR_OFMOUNT" ] && echo "$NAME: Path di Mount '$DIR_OFMOUNT' inesistente..."    && exit 1

mount=false
umount=false
search=false
backup=false
case "$EXEC" in
  -h) echo -e "Usage:\n\t$NAME [ -m | -u | -s <search-name> | -b ]" ; exit 1 ;;
  -m) mount=true  ;;
  -u) umount=true ;;
  -s) search=true ;;
  -b) backup=true ;;
  -p) _write "$FILE" "$FINE" ; exit ;; 
  * ) "$THIS" -h ; [ -n "$EXEC" ] && _error "First parameter \"$EXEC\" non valid!" ; exit 1 ;;
esac
ismount=$(ls "$DIR_OFMOUNT/") ; [ -z "$ismount" ] && ( ! $umount ) && mount=true

 ( $mount  ) && _print 'mount...'  && "$CMD_ENCFS" "$PATH_SOURCE" "$DIR_OFMOUNT"
 ( $umount ) && _print 'umount...' && sudo "$CMD_UMOUNT" "$DIR_OFMOUNT"
#( $search ) && _print 'search...' && "$CMD_FIND" -L "$DIR_OFMOUNT" -type f -iname $*    -print0 | sort -z | xargs -0i bash -c "echo 'FILE=[ {} ]' && cat '{}'"
#( $search ) && _print 'search...' && "$CMD_FIND" -L "$DIR_OFMOUNT" -type f -iname $*    -print0 | sort -z | xargs -0i bash -c "$THIS -p \"{}\""
 ( $search ) && _print 'search...' && "$CMD_FIND" -L "$DIR_OFMOUNT" -type f -iname $FILE -print0 | sort -z | xargs -0i bash -c "$THIS -p \"{}\" \"$FINE\""
#( $backup ) && _print 'backup...' && "$CMD_RAR" $OPT_RAR "$TAG_BACKUP_" "$DIR_BACKUP_"
 ( $backup ) && _print 'backup...' && "$CMD_ZIP" $OPT_ZIP "$TAG_BACKUP_" "$DIR_BACKUP_"

exit
